/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package za.env.raw.opm.firstidmasterentity;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Education extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -326435362272795188L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Education\",\"namespace\":\"za.env.raw.opm.firstidmasterentity\",\"fields\":[{\"name\":\"highestQualificationEntpsTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"qualificationDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"qualificationSpecialityEntpsTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"qualificationProofIndicator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"qualificationStartDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"educationActiveIndicator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Education> ENCODER =
      new BinaryMessageEncoder<Education>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Education> DECODER =
      new BinaryMessageDecoder<Education>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Education> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Education> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Education> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Education>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Education to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Education from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Education instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Education fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String highestQualificationEntpsTypeCode;
  @Deprecated public java.lang.String qualificationDate;
  @Deprecated public java.lang.String qualificationSpecialityEntpsTypeCode;
  @Deprecated public java.lang.String qualificationProofIndicator;
  @Deprecated public java.lang.String qualificationStartDate;
  @Deprecated public java.lang.String educationActiveIndicator;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Education() {}

  /**
   * All-args constructor.
   * @param highestQualificationEntpsTypeCode The new value for highestQualificationEntpsTypeCode
   * @param qualificationDate The new value for qualificationDate
   * @param qualificationSpecialityEntpsTypeCode The new value for qualificationSpecialityEntpsTypeCode
   * @param qualificationProofIndicator The new value for qualificationProofIndicator
   * @param qualificationStartDate The new value for qualificationStartDate
   * @param educationActiveIndicator The new value for educationActiveIndicator
   */
  public Education(java.lang.String highestQualificationEntpsTypeCode, java.lang.String qualificationDate, java.lang.String qualificationSpecialityEntpsTypeCode, java.lang.String qualificationProofIndicator, java.lang.String qualificationStartDate, java.lang.String educationActiveIndicator) {
    this.highestQualificationEntpsTypeCode = highestQualificationEntpsTypeCode;
    this.qualificationDate = qualificationDate;
    this.qualificationSpecialityEntpsTypeCode = qualificationSpecialityEntpsTypeCode;
    this.qualificationProofIndicator = qualificationProofIndicator;
    this.qualificationStartDate = qualificationStartDate;
    this.educationActiveIndicator = educationActiveIndicator;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return highestQualificationEntpsTypeCode;
    case 1: return qualificationDate;
    case 2: return qualificationSpecialityEntpsTypeCode;
    case 3: return qualificationProofIndicator;
    case 4: return qualificationStartDate;
    case 5: return educationActiveIndicator;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: highestQualificationEntpsTypeCode = value$ != null ? value$.toString() : null; break;
    case 1: qualificationDate = value$ != null ? value$.toString() : null; break;
    case 2: qualificationSpecialityEntpsTypeCode = value$ != null ? value$.toString() : null; break;
    case 3: qualificationProofIndicator = value$ != null ? value$.toString() : null; break;
    case 4: qualificationStartDate = value$ != null ? value$.toString() : null; break;
    case 5: educationActiveIndicator = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'highestQualificationEntpsTypeCode' field.
   * @return The value of the 'highestQualificationEntpsTypeCode' field.
   */
  public java.lang.String getHighestQualificationEntpsTypeCode() {
    return highestQualificationEntpsTypeCode;
  }


  /**
   * Sets the value of the 'highestQualificationEntpsTypeCode' field.
   * @param value the value to set.
   */
  public void setHighestQualificationEntpsTypeCode(java.lang.String value) {
    this.highestQualificationEntpsTypeCode = value;
  }

  /**
   * Gets the value of the 'qualificationDate' field.
   * @return The value of the 'qualificationDate' field.
   */
  public java.lang.String getQualificationDate() {
    return qualificationDate;
  }


  /**
   * Sets the value of the 'qualificationDate' field.
   * @param value the value to set.
   */
  public void setQualificationDate(java.lang.String value) {
    this.qualificationDate = value;
  }

  /**
   * Gets the value of the 'qualificationSpecialityEntpsTypeCode' field.
   * @return The value of the 'qualificationSpecialityEntpsTypeCode' field.
   */
  public java.lang.String getQualificationSpecialityEntpsTypeCode() {
    return qualificationSpecialityEntpsTypeCode;
  }


  /**
   * Sets the value of the 'qualificationSpecialityEntpsTypeCode' field.
   * @param value the value to set.
   */
  public void setQualificationSpecialityEntpsTypeCode(java.lang.String value) {
    this.qualificationSpecialityEntpsTypeCode = value;
  }

  /**
   * Gets the value of the 'qualificationProofIndicator' field.
   * @return The value of the 'qualificationProofIndicator' field.
   */
  public java.lang.String getQualificationProofIndicator() {
    return qualificationProofIndicator;
  }


  /**
   * Sets the value of the 'qualificationProofIndicator' field.
   * @param value the value to set.
   */
  public void setQualificationProofIndicator(java.lang.String value) {
    this.qualificationProofIndicator = value;
  }

  /**
   * Gets the value of the 'qualificationStartDate' field.
   * @return The value of the 'qualificationStartDate' field.
   */
  public java.lang.String getQualificationStartDate() {
    return qualificationStartDate;
  }


  /**
   * Sets the value of the 'qualificationStartDate' field.
   * @param value the value to set.
   */
  public void setQualificationStartDate(java.lang.String value) {
    this.qualificationStartDate = value;
  }

  /**
   * Gets the value of the 'educationActiveIndicator' field.
   * @return The value of the 'educationActiveIndicator' field.
   */
  public java.lang.String getEducationActiveIndicator() {
    return educationActiveIndicator;
  }


  /**
   * Sets the value of the 'educationActiveIndicator' field.
   * @param value the value to set.
   */
  public void setEducationActiveIndicator(java.lang.String value) {
    this.educationActiveIndicator = value;
  }

  /**
   * Creates a new Education RecordBuilder.
   * @return A new Education RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.Education.Builder newBuilder() {
    return new za.env.raw.opm.firstidmasterentity.Education.Builder();
  }

  /**
   * Creates a new Education RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Education RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.Education.Builder newBuilder(za.env.raw.opm.firstidmasterentity.Education.Builder other) {
    if (other == null) {
      return new za.env.raw.opm.firstidmasterentity.Education.Builder();
    } else {
      return new za.env.raw.opm.firstidmasterentity.Education.Builder(other);
    }
  }

  /**
   * Creates a new Education RecordBuilder by copying an existing Education instance.
   * @param other The existing instance to copy.
   * @return A new Education RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.Education.Builder newBuilder(za.env.raw.opm.firstidmasterentity.Education other) {
    if (other == null) {
      return new za.env.raw.opm.firstidmasterentity.Education.Builder();
    } else {
      return new za.env.raw.opm.firstidmasterentity.Education.Builder(other);
    }
  }

  /**
   * RecordBuilder for Education instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Education>
    implements org.apache.avro.data.RecordBuilder<Education> {

    private java.lang.String highestQualificationEntpsTypeCode;
    private java.lang.String qualificationDate;
    private java.lang.String qualificationSpecialityEntpsTypeCode;
    private java.lang.String qualificationProofIndicator;
    private java.lang.String qualificationStartDate;
    private java.lang.String educationActiveIndicator;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(za.env.raw.opm.firstidmasterentity.Education.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.highestQualificationEntpsTypeCode)) {
        this.highestQualificationEntpsTypeCode = data().deepCopy(fields()[0].schema(), other.highestQualificationEntpsTypeCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.qualificationDate)) {
        this.qualificationDate = data().deepCopy(fields()[1].schema(), other.qualificationDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.qualificationSpecialityEntpsTypeCode)) {
        this.qualificationSpecialityEntpsTypeCode = data().deepCopy(fields()[2].schema(), other.qualificationSpecialityEntpsTypeCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.qualificationProofIndicator)) {
        this.qualificationProofIndicator = data().deepCopy(fields()[3].schema(), other.qualificationProofIndicator);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.qualificationStartDate)) {
        this.qualificationStartDate = data().deepCopy(fields()[4].schema(), other.qualificationStartDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.educationActiveIndicator)) {
        this.educationActiveIndicator = data().deepCopy(fields()[5].schema(), other.educationActiveIndicator);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Education instance
     * @param other The existing instance to copy.
     */
    private Builder(za.env.raw.opm.firstidmasterentity.Education other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.highestQualificationEntpsTypeCode)) {
        this.highestQualificationEntpsTypeCode = data().deepCopy(fields()[0].schema(), other.highestQualificationEntpsTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qualificationDate)) {
        this.qualificationDate = data().deepCopy(fields()[1].schema(), other.qualificationDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qualificationSpecialityEntpsTypeCode)) {
        this.qualificationSpecialityEntpsTypeCode = data().deepCopy(fields()[2].schema(), other.qualificationSpecialityEntpsTypeCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.qualificationProofIndicator)) {
        this.qualificationProofIndicator = data().deepCopy(fields()[3].schema(), other.qualificationProofIndicator);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.qualificationStartDate)) {
        this.qualificationStartDate = data().deepCopy(fields()[4].schema(), other.qualificationStartDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.educationActiveIndicator)) {
        this.educationActiveIndicator = data().deepCopy(fields()[5].schema(), other.educationActiveIndicator);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'highestQualificationEntpsTypeCode' field.
      * @return The value.
      */
    public java.lang.String getHighestQualificationEntpsTypeCode() {
      return highestQualificationEntpsTypeCode;
    }


    /**
      * Sets the value of the 'highestQualificationEntpsTypeCode' field.
      * @param value The value of 'highestQualificationEntpsTypeCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder setHighestQualificationEntpsTypeCode(java.lang.String value) {
      validate(fields()[0], value);
      this.highestQualificationEntpsTypeCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'highestQualificationEntpsTypeCode' field has been set.
      * @return True if the 'highestQualificationEntpsTypeCode' field has been set, false otherwise.
      */
    public boolean hasHighestQualificationEntpsTypeCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'highestQualificationEntpsTypeCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder clearHighestQualificationEntpsTypeCode() {
      highestQualificationEntpsTypeCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualificationDate' field.
      * @return The value.
      */
    public java.lang.String getQualificationDate() {
      return qualificationDate;
    }


    /**
      * Sets the value of the 'qualificationDate' field.
      * @param value The value of 'qualificationDate'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder setQualificationDate(java.lang.String value) {
      validate(fields()[1], value);
      this.qualificationDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qualificationDate' field has been set.
      * @return True if the 'qualificationDate' field has been set, false otherwise.
      */
    public boolean hasQualificationDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qualificationDate' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder clearQualificationDate() {
      qualificationDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualificationSpecialityEntpsTypeCode' field.
      * @return The value.
      */
    public java.lang.String getQualificationSpecialityEntpsTypeCode() {
      return qualificationSpecialityEntpsTypeCode;
    }


    /**
      * Sets the value of the 'qualificationSpecialityEntpsTypeCode' field.
      * @param value The value of 'qualificationSpecialityEntpsTypeCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder setQualificationSpecialityEntpsTypeCode(java.lang.String value) {
      validate(fields()[2], value);
      this.qualificationSpecialityEntpsTypeCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'qualificationSpecialityEntpsTypeCode' field has been set.
      * @return True if the 'qualificationSpecialityEntpsTypeCode' field has been set, false otherwise.
      */
    public boolean hasQualificationSpecialityEntpsTypeCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'qualificationSpecialityEntpsTypeCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder clearQualificationSpecialityEntpsTypeCode() {
      qualificationSpecialityEntpsTypeCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualificationProofIndicator' field.
      * @return The value.
      */
    public java.lang.String getQualificationProofIndicator() {
      return qualificationProofIndicator;
    }


    /**
      * Sets the value of the 'qualificationProofIndicator' field.
      * @param value The value of 'qualificationProofIndicator'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder setQualificationProofIndicator(java.lang.String value) {
      validate(fields()[3], value);
      this.qualificationProofIndicator = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'qualificationProofIndicator' field has been set.
      * @return True if the 'qualificationProofIndicator' field has been set, false otherwise.
      */
    public boolean hasQualificationProofIndicator() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'qualificationProofIndicator' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder clearQualificationProofIndicator() {
      qualificationProofIndicator = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualificationStartDate' field.
      * @return The value.
      */
    public java.lang.String getQualificationStartDate() {
      return qualificationStartDate;
    }


    /**
      * Sets the value of the 'qualificationStartDate' field.
      * @param value The value of 'qualificationStartDate'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder setQualificationStartDate(java.lang.String value) {
      validate(fields()[4], value);
      this.qualificationStartDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'qualificationStartDate' field has been set.
      * @return True if the 'qualificationStartDate' field has been set, false otherwise.
      */
    public boolean hasQualificationStartDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'qualificationStartDate' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder clearQualificationStartDate() {
      qualificationStartDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'educationActiveIndicator' field.
      * @return The value.
      */
    public java.lang.String getEducationActiveIndicator() {
      return educationActiveIndicator;
    }


    /**
      * Sets the value of the 'educationActiveIndicator' field.
      * @param value The value of 'educationActiveIndicator'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder setEducationActiveIndicator(java.lang.String value) {
      validate(fields()[5], value);
      this.educationActiveIndicator = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'educationActiveIndicator' field has been set.
      * @return True if the 'educationActiveIndicator' field has been set, false otherwise.
      */
    public boolean hasEducationActiveIndicator() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'educationActiveIndicator' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Education.Builder clearEducationActiveIndicator() {
      educationActiveIndicator = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Education build() {
      try {
        Education record = new Education();
        record.highestQualificationEntpsTypeCode = fieldSetFlags()[0] ? this.highestQualificationEntpsTypeCode : (java.lang.String) defaultValue(fields()[0]);
        record.qualificationDate = fieldSetFlags()[1] ? this.qualificationDate : (java.lang.String) defaultValue(fields()[1]);
        record.qualificationSpecialityEntpsTypeCode = fieldSetFlags()[2] ? this.qualificationSpecialityEntpsTypeCode : (java.lang.String) defaultValue(fields()[2]);
        record.qualificationProofIndicator = fieldSetFlags()[3] ? this.qualificationProofIndicator : (java.lang.String) defaultValue(fields()[3]);
        record.qualificationStartDate = fieldSetFlags()[4] ? this.qualificationStartDate : (java.lang.String) defaultValue(fields()[4]);
        record.educationActiveIndicator = fieldSetFlags()[5] ? this.educationActiveIndicator : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Education>
    WRITER$ = (org.apache.avro.io.DatumWriter<Education>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Education>
    READER$ = (org.apache.avro.io.DatumReader<Education>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.highestQualificationEntpsTypeCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.highestQualificationEntpsTypeCode);
    }

    if (this.qualificationDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualificationDate);
    }

    if (this.qualificationSpecialityEntpsTypeCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualificationSpecialityEntpsTypeCode);
    }

    if (this.qualificationProofIndicator == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualificationProofIndicator);
    }

    if (this.qualificationStartDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualificationStartDate);
    }

    if (this.educationActiveIndicator == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.educationActiveIndicator);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.highestQualificationEntpsTypeCode = null;
      } else {
        this.highestQualificationEntpsTypeCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualificationDate = null;
      } else {
        this.qualificationDate = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualificationSpecialityEntpsTypeCode = null;
      } else {
        this.qualificationSpecialityEntpsTypeCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualificationProofIndicator = null;
      } else {
        this.qualificationProofIndicator = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualificationStartDate = null;
      } else {
        this.qualificationStartDate = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.educationActiveIndicator = null;
      } else {
        this.educationActiveIndicator = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.highestQualificationEntpsTypeCode = null;
          } else {
            this.highestQualificationEntpsTypeCode = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualificationDate = null;
          } else {
            this.qualificationDate = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualificationSpecialityEntpsTypeCode = null;
          } else {
            this.qualificationSpecialityEntpsTypeCode = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualificationProofIndicator = null;
          } else {
            this.qualificationProofIndicator = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualificationStartDate = null;
          } else {
            this.qualificationStartDate = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.educationActiveIndicator = null;
          } else {
            this.educationActiveIndicator = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










