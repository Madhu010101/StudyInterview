/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package za.env.raw.opm.firstidmasterentity;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PartyClassification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8626688067624861843L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PartyClassification\",\"namespace\":\"za.env.raw.opm.firstidmasterentity\",\"fields\":[{\"name\":\"partyClassificationTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"partyClassificationAttributeName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"partyClassificationValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"partyClassificationActiveIndicator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PartyClassification> ENCODER =
      new BinaryMessageEncoder<PartyClassification>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PartyClassification> DECODER =
      new BinaryMessageDecoder<PartyClassification>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PartyClassification> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PartyClassification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PartyClassification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PartyClassification>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PartyClassification to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PartyClassification from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PartyClassification instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PartyClassification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String partyClassificationTypeCode;
  @Deprecated public java.lang.String partyClassificationAttributeName;
  @Deprecated public java.lang.String partyClassificationValue;
  @Deprecated public java.lang.String partyClassificationActiveIndicator;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PartyClassification() {}

  /**
   * All-args constructor.
   * @param partyClassificationTypeCode The new value for partyClassificationTypeCode
   * @param partyClassificationAttributeName The new value for partyClassificationAttributeName
   * @param partyClassificationValue The new value for partyClassificationValue
   * @param partyClassificationActiveIndicator The new value for partyClassificationActiveIndicator
   */
  public PartyClassification(java.lang.String partyClassificationTypeCode, java.lang.String partyClassificationAttributeName, java.lang.String partyClassificationValue, java.lang.String partyClassificationActiveIndicator) {
    this.partyClassificationTypeCode = partyClassificationTypeCode;
    this.partyClassificationAttributeName = partyClassificationAttributeName;
    this.partyClassificationValue = partyClassificationValue;
    this.partyClassificationActiveIndicator = partyClassificationActiveIndicator;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return partyClassificationTypeCode;
    case 1: return partyClassificationAttributeName;
    case 2: return partyClassificationValue;
    case 3: return partyClassificationActiveIndicator;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: partyClassificationTypeCode = value$ != null ? value$.toString() : null; break;
    case 1: partyClassificationAttributeName = value$ != null ? value$.toString() : null; break;
    case 2: partyClassificationValue = value$ != null ? value$.toString() : null; break;
    case 3: partyClassificationActiveIndicator = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'partyClassificationTypeCode' field.
   * @return The value of the 'partyClassificationTypeCode' field.
   */
  public java.lang.String getPartyClassificationTypeCode() {
    return partyClassificationTypeCode;
  }


  /**
   * Sets the value of the 'partyClassificationTypeCode' field.
   * @param value the value to set.
   */
  public void setPartyClassificationTypeCode(java.lang.String value) {
    this.partyClassificationTypeCode = value;
  }

  /**
   * Gets the value of the 'partyClassificationAttributeName' field.
   * @return The value of the 'partyClassificationAttributeName' field.
   */
  public java.lang.String getPartyClassificationAttributeName() {
    return partyClassificationAttributeName;
  }


  /**
   * Sets the value of the 'partyClassificationAttributeName' field.
   * @param value the value to set.
   */
  public void setPartyClassificationAttributeName(java.lang.String value) {
    this.partyClassificationAttributeName = value;
  }

  /**
   * Gets the value of the 'partyClassificationValue' field.
   * @return The value of the 'partyClassificationValue' field.
   */
  public java.lang.String getPartyClassificationValue() {
    return partyClassificationValue;
  }


  /**
   * Sets the value of the 'partyClassificationValue' field.
   * @param value the value to set.
   */
  public void setPartyClassificationValue(java.lang.String value) {
    this.partyClassificationValue = value;
  }

  /**
   * Gets the value of the 'partyClassificationActiveIndicator' field.
   * @return The value of the 'partyClassificationActiveIndicator' field.
   */
  public java.lang.String getPartyClassificationActiveIndicator() {
    return partyClassificationActiveIndicator;
  }


  /**
   * Sets the value of the 'partyClassificationActiveIndicator' field.
   * @param value the value to set.
   */
  public void setPartyClassificationActiveIndicator(java.lang.String value) {
    this.partyClassificationActiveIndicator = value;
  }

  /**
   * Creates a new PartyClassification RecordBuilder.
   * @return A new PartyClassification RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.PartyClassification.Builder newBuilder() {
    return new za.env.raw.opm.firstidmasterentity.PartyClassification.Builder();
  }

  /**
   * Creates a new PartyClassification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PartyClassification RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.PartyClassification.Builder newBuilder(za.env.raw.opm.firstidmasterentity.PartyClassification.Builder other) {
    if (other == null) {
      return new za.env.raw.opm.firstidmasterentity.PartyClassification.Builder();
    } else {
      return new za.env.raw.opm.firstidmasterentity.PartyClassification.Builder(other);
    }
  }

  /**
   * Creates a new PartyClassification RecordBuilder by copying an existing PartyClassification instance.
   * @param other The existing instance to copy.
   * @return A new PartyClassification RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.PartyClassification.Builder newBuilder(za.env.raw.opm.firstidmasterentity.PartyClassification other) {
    if (other == null) {
      return new za.env.raw.opm.firstidmasterentity.PartyClassification.Builder();
    } else {
      return new za.env.raw.opm.firstidmasterentity.PartyClassification.Builder(other);
    }
  }

  /**
   * RecordBuilder for PartyClassification instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PartyClassification>
    implements org.apache.avro.data.RecordBuilder<PartyClassification> {

    private java.lang.String partyClassificationTypeCode;
    private java.lang.String partyClassificationAttributeName;
    private java.lang.String partyClassificationValue;
    private java.lang.String partyClassificationActiveIndicator;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(za.env.raw.opm.firstidmasterentity.PartyClassification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.partyClassificationTypeCode)) {
        this.partyClassificationTypeCode = data().deepCopy(fields()[0].schema(), other.partyClassificationTypeCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.partyClassificationAttributeName)) {
        this.partyClassificationAttributeName = data().deepCopy(fields()[1].schema(), other.partyClassificationAttributeName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.partyClassificationValue)) {
        this.partyClassificationValue = data().deepCopy(fields()[2].schema(), other.partyClassificationValue);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.partyClassificationActiveIndicator)) {
        this.partyClassificationActiveIndicator = data().deepCopy(fields()[3].schema(), other.partyClassificationActiveIndicator);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PartyClassification instance
     * @param other The existing instance to copy.
     */
    private Builder(za.env.raw.opm.firstidmasterentity.PartyClassification other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.partyClassificationTypeCode)) {
        this.partyClassificationTypeCode = data().deepCopy(fields()[0].schema(), other.partyClassificationTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partyClassificationAttributeName)) {
        this.partyClassificationAttributeName = data().deepCopy(fields()[1].schema(), other.partyClassificationAttributeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.partyClassificationValue)) {
        this.partyClassificationValue = data().deepCopy(fields()[2].schema(), other.partyClassificationValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.partyClassificationActiveIndicator)) {
        this.partyClassificationActiveIndicator = data().deepCopy(fields()[3].schema(), other.partyClassificationActiveIndicator);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'partyClassificationTypeCode' field.
      * @return The value.
      */
    public java.lang.String getPartyClassificationTypeCode() {
      return partyClassificationTypeCode;
    }


    /**
      * Sets the value of the 'partyClassificationTypeCode' field.
      * @param value The value of 'partyClassificationTypeCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder setPartyClassificationTypeCode(java.lang.String value) {
      validate(fields()[0], value);
      this.partyClassificationTypeCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'partyClassificationTypeCode' field has been set.
      * @return True if the 'partyClassificationTypeCode' field has been set, false otherwise.
      */
    public boolean hasPartyClassificationTypeCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'partyClassificationTypeCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder clearPartyClassificationTypeCode() {
      partyClassificationTypeCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'partyClassificationAttributeName' field.
      * @return The value.
      */
    public java.lang.String getPartyClassificationAttributeName() {
      return partyClassificationAttributeName;
    }


    /**
      * Sets the value of the 'partyClassificationAttributeName' field.
      * @param value The value of 'partyClassificationAttributeName'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder setPartyClassificationAttributeName(java.lang.String value) {
      validate(fields()[1], value);
      this.partyClassificationAttributeName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'partyClassificationAttributeName' field has been set.
      * @return True if the 'partyClassificationAttributeName' field has been set, false otherwise.
      */
    public boolean hasPartyClassificationAttributeName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'partyClassificationAttributeName' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder clearPartyClassificationAttributeName() {
      partyClassificationAttributeName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'partyClassificationValue' field.
      * @return The value.
      */
    public java.lang.String getPartyClassificationValue() {
      return partyClassificationValue;
    }


    /**
      * Sets the value of the 'partyClassificationValue' field.
      * @param value The value of 'partyClassificationValue'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder setPartyClassificationValue(java.lang.String value) {
      validate(fields()[2], value);
      this.partyClassificationValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'partyClassificationValue' field has been set.
      * @return True if the 'partyClassificationValue' field has been set, false otherwise.
      */
    public boolean hasPartyClassificationValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'partyClassificationValue' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder clearPartyClassificationValue() {
      partyClassificationValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'partyClassificationActiveIndicator' field.
      * @return The value.
      */
    public java.lang.String getPartyClassificationActiveIndicator() {
      return partyClassificationActiveIndicator;
    }


    /**
      * Sets the value of the 'partyClassificationActiveIndicator' field.
      * @param value The value of 'partyClassificationActiveIndicator'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder setPartyClassificationActiveIndicator(java.lang.String value) {
      validate(fields()[3], value);
      this.partyClassificationActiveIndicator = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'partyClassificationActiveIndicator' field has been set.
      * @return True if the 'partyClassificationActiveIndicator' field has been set, false otherwise.
      */
    public boolean hasPartyClassificationActiveIndicator() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'partyClassificationActiveIndicator' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.PartyClassification.Builder clearPartyClassificationActiveIndicator() {
      partyClassificationActiveIndicator = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PartyClassification build() {
      try {
        PartyClassification record = new PartyClassification();
        record.partyClassificationTypeCode = fieldSetFlags()[0] ? this.partyClassificationTypeCode : (java.lang.String) defaultValue(fields()[0]);
        record.partyClassificationAttributeName = fieldSetFlags()[1] ? this.partyClassificationAttributeName : (java.lang.String) defaultValue(fields()[1]);
        record.partyClassificationValue = fieldSetFlags()[2] ? this.partyClassificationValue : (java.lang.String) defaultValue(fields()[2]);
        record.partyClassificationActiveIndicator = fieldSetFlags()[3] ? this.partyClassificationActiveIndicator : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PartyClassification>
    WRITER$ = (org.apache.avro.io.DatumWriter<PartyClassification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PartyClassification>
    READER$ = (org.apache.avro.io.DatumReader<PartyClassification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.partyClassificationTypeCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.partyClassificationTypeCode);
    }

    if (this.partyClassificationAttributeName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.partyClassificationAttributeName);
    }

    if (this.partyClassificationValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.partyClassificationValue);
    }

    if (this.partyClassificationActiveIndicator == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.partyClassificationActiveIndicator);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.partyClassificationTypeCode = null;
      } else {
        this.partyClassificationTypeCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.partyClassificationAttributeName = null;
      } else {
        this.partyClassificationAttributeName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.partyClassificationValue = null;
      } else {
        this.partyClassificationValue = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.partyClassificationActiveIndicator = null;
      } else {
        this.partyClassificationActiveIndicator = in.readString();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.partyClassificationTypeCode = null;
          } else {
            this.partyClassificationTypeCode = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.partyClassificationAttributeName = null;
          } else {
            this.partyClassificationAttributeName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.partyClassificationValue = null;
          } else {
            this.partyClassificationValue = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.partyClassificationActiveIndicator = null;
          } else {
            this.partyClassificationActiveIndicator = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










