/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package za.env.raw.opm.firstidmasterentity;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Key extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1088642672805409864L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Key\",\"namespace\":\"za.env.raw.opm.firstidmasterentity\",\"fields\":[{\"name\":\"keyCompanyEntpsTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"keyIdentifierEntpsTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"keyIdentifierJurisdictionId\",\"type\":[\"null\",{\"type\":\"int\",\"java-class\":\"java.lang.Integer\"}],\"default\":null},{\"name\":\"keyIdentifierNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"keyIdentifierSystemEntpsTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"keyJurisdictionCountryEntpsCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Key> ENCODER =
      new BinaryMessageEncoder<Key>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Key> DECODER =
      new BinaryMessageDecoder<Key>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Key> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Key> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Key> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Key>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Key to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Key from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Key instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Key fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String keyCompanyEntpsTypeCode;
  @Deprecated public java.lang.String keyIdentifierEntpsTypeCode;
  @Deprecated public java.lang.Integer keyIdentifierJurisdictionId;
  @Deprecated public java.lang.String keyIdentifierNumber;
  @Deprecated public java.lang.String keyIdentifierSystemEntpsTypeCode;
  @Deprecated public java.lang.String keyJurisdictionCountryEntpsCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Key() {}

  /**
   * All-args constructor.
   * @param keyCompanyEntpsTypeCode The new value for keyCompanyEntpsTypeCode
   * @param keyIdentifierEntpsTypeCode The new value for keyIdentifierEntpsTypeCode
   * @param keyIdentifierJurisdictionId The new value for keyIdentifierJurisdictionId
   * @param keyIdentifierNumber The new value for keyIdentifierNumber
   * @param keyIdentifierSystemEntpsTypeCode The new value for keyIdentifierSystemEntpsTypeCode
   * @param keyJurisdictionCountryEntpsCode The new value for keyJurisdictionCountryEntpsCode
   */
  public Key(java.lang.String keyCompanyEntpsTypeCode, java.lang.String keyIdentifierEntpsTypeCode, java.lang.Integer keyIdentifierJurisdictionId, java.lang.String keyIdentifierNumber, java.lang.String keyIdentifierSystemEntpsTypeCode, java.lang.String keyJurisdictionCountryEntpsCode) {
    this.keyCompanyEntpsTypeCode = keyCompanyEntpsTypeCode;
    this.keyIdentifierEntpsTypeCode = keyIdentifierEntpsTypeCode;
    this.keyIdentifierJurisdictionId = keyIdentifierJurisdictionId;
    this.keyIdentifierNumber = keyIdentifierNumber;
    this.keyIdentifierSystemEntpsTypeCode = keyIdentifierSystemEntpsTypeCode;
    this.keyJurisdictionCountryEntpsCode = keyJurisdictionCountryEntpsCode;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return keyCompanyEntpsTypeCode;
    case 1: return keyIdentifierEntpsTypeCode;
    case 2: return keyIdentifierJurisdictionId;
    case 3: return keyIdentifierNumber;
    case 4: return keyIdentifierSystemEntpsTypeCode;
    case 5: return keyJurisdictionCountryEntpsCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: keyCompanyEntpsTypeCode = value$ != null ? value$.toString() : null; break;
    case 1: keyIdentifierEntpsTypeCode = value$ != null ? value$.toString() : null; break;
    case 2: keyIdentifierJurisdictionId = (java.lang.Integer)value$; break;
    case 3: keyIdentifierNumber = value$ != null ? value$.toString() : null; break;
    case 4: keyIdentifierSystemEntpsTypeCode = value$ != null ? value$.toString() : null; break;
    case 5: keyJurisdictionCountryEntpsCode = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'keyCompanyEntpsTypeCode' field.
   * @return The value of the 'keyCompanyEntpsTypeCode' field.
   */
  public java.lang.String getKeyCompanyEntpsTypeCode() {
    return keyCompanyEntpsTypeCode;
  }


  /**
   * Sets the value of the 'keyCompanyEntpsTypeCode' field.
   * @param value the value to set.
   */
  public void setKeyCompanyEntpsTypeCode(java.lang.String value) {
    this.keyCompanyEntpsTypeCode = value;
  }

  /**
   * Gets the value of the 'keyIdentifierEntpsTypeCode' field.
   * @return The value of the 'keyIdentifierEntpsTypeCode' field.
   */
  public java.lang.String getKeyIdentifierEntpsTypeCode() {
    return keyIdentifierEntpsTypeCode;
  }


  /**
   * Sets the value of the 'keyIdentifierEntpsTypeCode' field.
   * @param value the value to set.
   */
  public void setKeyIdentifierEntpsTypeCode(java.lang.String value) {
    this.keyIdentifierEntpsTypeCode = value;
  }

  /**
   * Gets the value of the 'keyIdentifierJurisdictionId' field.
   * @return The value of the 'keyIdentifierJurisdictionId' field.
   */
  public java.lang.Integer getKeyIdentifierJurisdictionId() {
    return keyIdentifierJurisdictionId;
  }


  /**
   * Sets the value of the 'keyIdentifierJurisdictionId' field.
   * @param value the value to set.
   */
  public void setKeyIdentifierJurisdictionId(java.lang.Integer value) {
    this.keyIdentifierJurisdictionId = value;
  }

  /**
   * Gets the value of the 'keyIdentifierNumber' field.
   * @return The value of the 'keyIdentifierNumber' field.
   */
  public java.lang.String getKeyIdentifierNumber() {
    return keyIdentifierNumber;
  }


  /**
   * Sets the value of the 'keyIdentifierNumber' field.
   * @param value the value to set.
   */
  public void setKeyIdentifierNumber(java.lang.String value) {
    this.keyIdentifierNumber = value;
  }

  /**
   * Gets the value of the 'keyIdentifierSystemEntpsTypeCode' field.
   * @return The value of the 'keyIdentifierSystemEntpsTypeCode' field.
   */
  public java.lang.String getKeyIdentifierSystemEntpsTypeCode() {
    return keyIdentifierSystemEntpsTypeCode;
  }


  /**
   * Sets the value of the 'keyIdentifierSystemEntpsTypeCode' field.
   * @param value the value to set.
   */
  public void setKeyIdentifierSystemEntpsTypeCode(java.lang.String value) {
    this.keyIdentifierSystemEntpsTypeCode = value;
  }

  /**
   * Gets the value of the 'keyJurisdictionCountryEntpsCode' field.
   * @return The value of the 'keyJurisdictionCountryEntpsCode' field.
   */
  public java.lang.String getKeyJurisdictionCountryEntpsCode() {
    return keyJurisdictionCountryEntpsCode;
  }


  /**
   * Sets the value of the 'keyJurisdictionCountryEntpsCode' field.
   * @param value the value to set.
   */
  public void setKeyJurisdictionCountryEntpsCode(java.lang.String value) {
    this.keyJurisdictionCountryEntpsCode = value;
  }

  /**
   * Creates a new Key RecordBuilder.
   * @return A new Key RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.Key.Builder newBuilder() {
    return new za.env.raw.opm.firstidmasterentity.Key.Builder();
  }

  /**
   * Creates a new Key RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Key RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.Key.Builder newBuilder(za.env.raw.opm.firstidmasterentity.Key.Builder other) {
    if (other == null) {
      return new za.env.raw.opm.firstidmasterentity.Key.Builder();
    } else {
      return new za.env.raw.opm.firstidmasterentity.Key.Builder(other);
    }
  }

  /**
   * Creates a new Key RecordBuilder by copying an existing Key instance.
   * @param other The existing instance to copy.
   * @return A new Key RecordBuilder
   */
  public static za.env.raw.opm.firstidmasterentity.Key.Builder newBuilder(za.env.raw.opm.firstidmasterentity.Key other) {
    if (other == null) {
      return new za.env.raw.opm.firstidmasterentity.Key.Builder();
    } else {
      return new za.env.raw.opm.firstidmasterentity.Key.Builder(other);
    }
  }

  /**
   * RecordBuilder for Key instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Key>
    implements org.apache.avro.data.RecordBuilder<Key> {

    private java.lang.String keyCompanyEntpsTypeCode;
    private java.lang.String keyIdentifierEntpsTypeCode;
    private java.lang.Integer keyIdentifierJurisdictionId;
    private java.lang.String keyIdentifierNumber;
    private java.lang.String keyIdentifierSystemEntpsTypeCode;
    private java.lang.String keyJurisdictionCountryEntpsCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(za.env.raw.opm.firstidmasterentity.Key.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.keyCompanyEntpsTypeCode)) {
        this.keyCompanyEntpsTypeCode = data().deepCopy(fields()[0].schema(), other.keyCompanyEntpsTypeCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.keyIdentifierEntpsTypeCode)) {
        this.keyIdentifierEntpsTypeCode = data().deepCopy(fields()[1].schema(), other.keyIdentifierEntpsTypeCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.keyIdentifierJurisdictionId)) {
        this.keyIdentifierJurisdictionId = data().deepCopy(fields()[2].schema(), other.keyIdentifierJurisdictionId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.keyIdentifierNumber)) {
        this.keyIdentifierNumber = data().deepCopy(fields()[3].schema(), other.keyIdentifierNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.keyIdentifierSystemEntpsTypeCode)) {
        this.keyIdentifierSystemEntpsTypeCode = data().deepCopy(fields()[4].schema(), other.keyIdentifierSystemEntpsTypeCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.keyJurisdictionCountryEntpsCode)) {
        this.keyJurisdictionCountryEntpsCode = data().deepCopy(fields()[5].schema(), other.keyJurisdictionCountryEntpsCode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Key instance
     * @param other The existing instance to copy.
     */
    private Builder(za.env.raw.opm.firstidmasterentity.Key other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.keyCompanyEntpsTypeCode)) {
        this.keyCompanyEntpsTypeCode = data().deepCopy(fields()[0].schema(), other.keyCompanyEntpsTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keyIdentifierEntpsTypeCode)) {
        this.keyIdentifierEntpsTypeCode = data().deepCopy(fields()[1].schema(), other.keyIdentifierEntpsTypeCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.keyIdentifierJurisdictionId)) {
        this.keyIdentifierJurisdictionId = data().deepCopy(fields()[2].schema(), other.keyIdentifierJurisdictionId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.keyIdentifierNumber)) {
        this.keyIdentifierNumber = data().deepCopy(fields()[3].schema(), other.keyIdentifierNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.keyIdentifierSystemEntpsTypeCode)) {
        this.keyIdentifierSystemEntpsTypeCode = data().deepCopy(fields()[4].schema(), other.keyIdentifierSystemEntpsTypeCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.keyJurisdictionCountryEntpsCode)) {
        this.keyJurisdictionCountryEntpsCode = data().deepCopy(fields()[5].schema(), other.keyJurisdictionCountryEntpsCode);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'keyCompanyEntpsTypeCode' field.
      * @return The value.
      */
    public java.lang.String getKeyCompanyEntpsTypeCode() {
      return keyCompanyEntpsTypeCode;
    }


    /**
      * Sets the value of the 'keyCompanyEntpsTypeCode' field.
      * @param value The value of 'keyCompanyEntpsTypeCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder setKeyCompanyEntpsTypeCode(java.lang.String value) {
      validate(fields()[0], value);
      this.keyCompanyEntpsTypeCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'keyCompanyEntpsTypeCode' field has been set.
      * @return True if the 'keyCompanyEntpsTypeCode' field has been set, false otherwise.
      */
    public boolean hasKeyCompanyEntpsTypeCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'keyCompanyEntpsTypeCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder clearKeyCompanyEntpsTypeCode() {
      keyCompanyEntpsTypeCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyIdentifierEntpsTypeCode' field.
      * @return The value.
      */
    public java.lang.String getKeyIdentifierEntpsTypeCode() {
      return keyIdentifierEntpsTypeCode;
    }


    /**
      * Sets the value of the 'keyIdentifierEntpsTypeCode' field.
      * @param value The value of 'keyIdentifierEntpsTypeCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder setKeyIdentifierEntpsTypeCode(java.lang.String value) {
      validate(fields()[1], value);
      this.keyIdentifierEntpsTypeCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'keyIdentifierEntpsTypeCode' field has been set.
      * @return True if the 'keyIdentifierEntpsTypeCode' field has been set, false otherwise.
      */
    public boolean hasKeyIdentifierEntpsTypeCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'keyIdentifierEntpsTypeCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder clearKeyIdentifierEntpsTypeCode() {
      keyIdentifierEntpsTypeCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyIdentifierJurisdictionId' field.
      * @return The value.
      */
    public java.lang.Integer getKeyIdentifierJurisdictionId() {
      return keyIdentifierJurisdictionId;
    }


    /**
      * Sets the value of the 'keyIdentifierJurisdictionId' field.
      * @param value The value of 'keyIdentifierJurisdictionId'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder setKeyIdentifierJurisdictionId(java.lang.Integer value) {
      validate(fields()[2], value);
      this.keyIdentifierJurisdictionId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'keyIdentifierJurisdictionId' field has been set.
      * @return True if the 'keyIdentifierJurisdictionId' field has been set, false otherwise.
      */
    public boolean hasKeyIdentifierJurisdictionId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'keyIdentifierJurisdictionId' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder clearKeyIdentifierJurisdictionId() {
      keyIdentifierJurisdictionId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyIdentifierNumber' field.
      * @return The value.
      */
    public java.lang.String getKeyIdentifierNumber() {
      return keyIdentifierNumber;
    }


    /**
      * Sets the value of the 'keyIdentifierNumber' field.
      * @param value The value of 'keyIdentifierNumber'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder setKeyIdentifierNumber(java.lang.String value) {
      validate(fields()[3], value);
      this.keyIdentifierNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'keyIdentifierNumber' field has been set.
      * @return True if the 'keyIdentifierNumber' field has been set, false otherwise.
      */
    public boolean hasKeyIdentifierNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'keyIdentifierNumber' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder clearKeyIdentifierNumber() {
      keyIdentifierNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyIdentifierSystemEntpsTypeCode' field.
      * @return The value.
      */
    public java.lang.String getKeyIdentifierSystemEntpsTypeCode() {
      return keyIdentifierSystemEntpsTypeCode;
    }


    /**
      * Sets the value of the 'keyIdentifierSystemEntpsTypeCode' field.
      * @param value The value of 'keyIdentifierSystemEntpsTypeCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder setKeyIdentifierSystemEntpsTypeCode(java.lang.String value) {
      validate(fields()[4], value);
      this.keyIdentifierSystemEntpsTypeCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'keyIdentifierSystemEntpsTypeCode' field has been set.
      * @return True if the 'keyIdentifierSystemEntpsTypeCode' field has been set, false otherwise.
      */
    public boolean hasKeyIdentifierSystemEntpsTypeCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'keyIdentifierSystemEntpsTypeCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder clearKeyIdentifierSystemEntpsTypeCode() {
      keyIdentifierSystemEntpsTypeCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyJurisdictionCountryEntpsCode' field.
      * @return The value.
      */
    public java.lang.String getKeyJurisdictionCountryEntpsCode() {
      return keyJurisdictionCountryEntpsCode;
    }


    /**
      * Sets the value of the 'keyJurisdictionCountryEntpsCode' field.
      * @param value The value of 'keyJurisdictionCountryEntpsCode'.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder setKeyJurisdictionCountryEntpsCode(java.lang.String value) {
      validate(fields()[5], value);
      this.keyJurisdictionCountryEntpsCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'keyJurisdictionCountryEntpsCode' field has been set.
      * @return True if the 'keyJurisdictionCountryEntpsCode' field has been set, false otherwise.
      */
    public boolean hasKeyJurisdictionCountryEntpsCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'keyJurisdictionCountryEntpsCode' field.
      * @return This builder.
      */
    public za.env.raw.opm.firstidmasterentity.Key.Builder clearKeyJurisdictionCountryEntpsCode() {
      keyJurisdictionCountryEntpsCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Key build() {
      try {
        Key record = new Key();
        record.keyCompanyEntpsTypeCode = fieldSetFlags()[0] ? this.keyCompanyEntpsTypeCode : (java.lang.String) defaultValue(fields()[0]);
        record.keyIdentifierEntpsTypeCode = fieldSetFlags()[1] ? this.keyIdentifierEntpsTypeCode : (java.lang.String) defaultValue(fields()[1]);
        record.keyIdentifierJurisdictionId = fieldSetFlags()[2] ? this.keyIdentifierJurisdictionId : (java.lang.Integer) defaultValue(fields()[2]);
        record.keyIdentifierNumber = fieldSetFlags()[3] ? this.keyIdentifierNumber : (java.lang.String) defaultValue(fields()[3]);
        record.keyIdentifierSystemEntpsTypeCode = fieldSetFlags()[4] ? this.keyIdentifierSystemEntpsTypeCode : (java.lang.String) defaultValue(fields()[4]);
        record.keyJurisdictionCountryEntpsCode = fieldSetFlags()[5] ? this.keyJurisdictionCountryEntpsCode : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Key>
    WRITER$ = (org.apache.avro.io.DatumWriter<Key>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Key>
    READER$ = (org.apache.avro.io.DatumReader<Key>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.keyCompanyEntpsTypeCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.keyCompanyEntpsTypeCode);
    }

    if (this.keyIdentifierEntpsTypeCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.keyIdentifierEntpsTypeCode);
    }

    if (this.keyIdentifierJurisdictionId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.keyIdentifierJurisdictionId);
    }

    if (this.keyIdentifierNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.keyIdentifierNumber);
    }

    if (this.keyIdentifierSystemEntpsTypeCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.keyIdentifierSystemEntpsTypeCode);
    }

    if (this.keyJurisdictionCountryEntpsCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.keyJurisdictionCountryEntpsCode);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.keyCompanyEntpsTypeCode = null;
      } else {
        this.keyCompanyEntpsTypeCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyIdentifierEntpsTypeCode = null;
      } else {
        this.keyIdentifierEntpsTypeCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyIdentifierJurisdictionId = null;
      } else {
        this.keyIdentifierJurisdictionId = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyIdentifierNumber = null;
      } else {
        this.keyIdentifierNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyIdentifierSystemEntpsTypeCode = null;
      } else {
        this.keyIdentifierSystemEntpsTypeCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyJurisdictionCountryEntpsCode = null;
      } else {
        this.keyJurisdictionCountryEntpsCode = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyCompanyEntpsTypeCode = null;
          } else {
            this.keyCompanyEntpsTypeCode = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyIdentifierEntpsTypeCode = null;
          } else {
            this.keyIdentifierEntpsTypeCode = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyIdentifierJurisdictionId = null;
          } else {
            this.keyIdentifierJurisdictionId = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyIdentifierNumber = null;
          } else {
            this.keyIdentifierNumber = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyIdentifierSystemEntpsTypeCode = null;
          } else {
            this.keyIdentifierSystemEntpsTypeCode = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyJurisdictionCountryEntpsCode = null;
          } else {
            this.keyJurisdictionCountryEntpsCode = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










